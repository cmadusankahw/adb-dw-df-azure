{
	"name": "SellerSCDFlow",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "dim_seller",
						"type": "DatasetReference"
					},
					"name": "SellerSource"
				},
				{
					"dataset": {
						"referenceName": "DimSeller",
						"type": "DatasetReference"
					},
					"name": "DimSeller"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "DimSeller",
						"type": "DatasetReference"
					},
					"name": "sinkAllatFirst"
				},
				{
					"dataset": {
						"referenceName": "DimSeller",
						"type": "DatasetReference"
					},
					"name": "sinkwithUpdatingSCD"
				}
			],
			"transformations": [
				{
					"name": "addingSCDIsCurrent"
				},
				{
					"name": "renameOLTPColumns"
				},
				{
					"name": "LookupForExistingRows"
				},
				{
					"name": "FilterExistingRows"
				},
				{
					"name": "SetIsCurrentToNo"
				},
				{
					"name": "AlterRows"
				},
				{
					"name": "SelectRequiredRows"
				},
				{
					"name": "DropLengthyCols"
				}
			],
			"script": "source(output(\n\t\tseller_id as string,\n\t\tseller_zip_code_prefix as integer,\n\t\tseller_city as string,\n\t\tseller_state as string,\n\t\tno_of_products_sold as integer,\n\t\tproduct_categories_sold as string,\n\t\tseller_size as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false) ~> SellerSource\nsource(output(\n\t\tsk_seller as integer,\n\t\tseller_id as string,\n\t\tseller_zip_code_prefix as integer,\n\t\tseller_city as string,\n\t\tseller_state as string,\n\t\tno_of_products_sold as integer,\n\t\tproduct_categories_sold as string,\n\t\tseller_size as string,\n\t\tscd_created_at as timestamp,\n\t\tscd_is_current as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table') ~> DimSeller\nSellerSource derive(scd_is_current = \"YES\",\n\t\tscd_created_at = currentTimestamp()) ~> addingSCDIsCurrent\nDimSeller select(mapColumn(\n\t\tDIM_sk_seller = sk_seller,\n\t\tDIM_seller_id = seller_id,\n\t\tDIM_seller_zip_code_prefix = seller_zip_code_prefix,\n\t\tDIM_seller_city = seller_city,\n\t\tDIM_seller_state = seller_state,\n\t\tDIM_no_of_products_sold = no_of_products_sold,\n\t\tDIM_seller_size = seller_size,\n\t\tDIM_scd_created_at = scd_created_at,\n\t\tDIM_scd_is_current = scd_is_current\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> renameOLTPColumns\nSellerSource, renameOLTPColumns lookup(seller_id == DIM_seller_id,\n\tmultiple: true,\n\tbroadcast: 'auto')~> LookupForExistingRows\nLookupForExistingRows filter(!isNull(DIM_seller_id)) ~> FilterExistingRows\nSelectRequiredRows derive(scd_is_current = \"NO\") ~> SetIsCurrentToNo\nSetIsCurrentToNo alterRow(updateIf(1==1)) ~> AlterRows\nFilterExistingRows select(mapColumn(\n\t\tsk_seller = DIM_sk_seller,\n\t\tseller_id = DIM_seller_id,\n\t\tseller_zip_code_prefix = DIM_seller_zip_code_prefix,\n\t\tseller_city = DIM_seller_city,\n\t\tseller_state = DIM_seller_state,\n\t\tseller_size = DIM_seller_size,\n\t\tscd_created_at = DIM_scd_created_at,\n\t\tscd_is_current = DIM_scd_is_current\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> SelectRequiredRows\naddingSCDIsCurrent select(mapColumn(\n\t\tseller_id,\n\t\tseller_zip_code_prefix,\n\t\tseller_city,\n\t\tseller_state,\n\t\tno_of_products_sold,\n\t\tseller_size,\n\t\tscd_is_current,\n\t\tscd_created_at\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> DropLengthyCols\nDropLengthyCols sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tinput(\n\t\tsk_seller as integer,\n\t\tseller_id as string,\n\t\tseller_zip_code_prefix as integer,\n\t\tseller_city as string,\n\t\tseller_state as string,\n\t\tno_of_products_sold as integer,\n\t\tproduct_categories_sold as string,\n\t\tseller_size as string,\n\t\tscd_created_at as timestamp,\n\t\tscd_is_current as string\n\t),\n\tdeletable:false,\n\tinsertable:true,\n\tupdateable:false,\n\tupsertable:false,\n\tformat: 'table',\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\tsaveOrder: 2,\n\terrorHandlingOption: 'stopOnFirstError',\n\tmapColumn(\n\t\tseller_id,\n\t\tseller_zip_code_prefix,\n\t\tseller_city,\n\t\tseller_state,\n\t\tno_of_products_sold,\n\t\tseller_size,\n\t\tscd_created_at,\n\t\tscd_is_current\n\t)) ~> sinkAllatFirst\nAlterRows sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tinput(\n\t\tsk_seller as integer,\n\t\tseller_id as string,\n\t\tseller_zip_code_prefix as integer,\n\t\tseller_city as string,\n\t\tseller_state as string,\n\t\tno_of_products_sold as integer,\n\t\tproduct_categories_sold as string,\n\t\tseller_size as string,\n\t\tscd_created_at as timestamp,\n\t\tscd_is_current as string\n\t),\n\tdeletable:false,\n\tinsertable:false,\n\tupdateable:true,\n\tupsertable:false,\n\tkeys:['sk_seller'],\n\tformat: 'table',\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\tsaveOrder: 1,\n\terrorHandlingOption: 'stopOnFirstError',\n\tmapColumn(\n\t\tsk_seller,\n\t\tseller_id,\n\t\tseller_zip_code_prefix,\n\t\tseller_city,\n\t\tseller_state,\n\t\tseller_size,\n\t\tscd_created_at,\n\t\tscd_is_current\n\t)) ~> sinkwithUpdatingSCD"
		}
	}
}