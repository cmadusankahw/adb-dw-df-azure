{
	"name": "DeliveryServiceSCDFlow",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "dim_delivery_service",
						"type": "DatasetReference"
					},
					"name": "DeliveryServiceSource"
				},
				{
					"dataset": {
						"referenceName": "DimDeliveryService",
						"type": "DatasetReference"
					},
					"name": "DimDeliveryService"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "DimDeliveryService",
						"type": "DatasetReference"
					},
					"name": "sinkAllatFirst"
				},
				{
					"dataset": {
						"referenceName": "DimDeliveryService",
						"type": "DatasetReference"
					},
					"name": "sinkwithUpdatingSCD"
				}
			],
			"transformations": [
				{
					"name": "addingSCDIsCurrent"
				},
				{
					"name": "renameOLTPColumns"
				},
				{
					"name": "LookupForExistingRows"
				},
				{
					"name": "FilterExistingRows"
				},
				{
					"name": "SetIsCurrentToNo"
				},
				{
					"name": "AlterRows"
				},
				{
					"name": "SelectRequiredRows"
				}
			],
			"script": "source(output(\n\t\tdelivery_service_id as string,\n\t\tdelivery_service_name as string,\n\t\tdelivery_service_city as string,\n\t\tdelivery_service_state as string,\n\t\tdelivery_service_zip_code_prefix as integer,\n\t\tdelivery_service_reg_date as date,\n\t\tdelivery_service_duration as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false) ~> DeliveryServiceSource\nsource(output(\n\t\tsk_delivery_service as integer,\n\t\tdelivery_service_id as string,\n\t\tdelivery_service_name as string,\n\t\tdelivery_service_city as string,\n\t\tdelivery_service_state as string,\n\t\tdelivery_service_zip_code_prefix as integer,\n\t\tdelivery_service_reg_date as timestamp,\n\t\tscd_created_at as timestamp,\n\t\tscd_is_current as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table') ~> DimDeliveryService\nDeliveryServiceSource derive(scd_is_current = \"YES\",\n\t\tscd_created_at = currentTimestamp()) ~> addingSCDIsCurrent\nDimDeliveryService select(mapColumn(\n\t\tDIM_sk_delivery_service = sk_delivery_service,\n\t\tDIM_delivery_service_id = delivery_service_id,\n\t\tDIM_delivery_service_name = delivery_service_name,\n\t\tDIM_delivery_service_city = delivery_service_city,\n\t\tDIM_delivery_service_state = delivery_service_state,\n\t\tDIM_delivery_service_zip_code_prefix = delivery_service_zip_code_prefix,\n\t\tDIM_delivery_service_reg_date = delivery_service_reg_date,\n\t\tDIM_scd_created_at = scd_created_at,\n\t\tDIM_scd_is_current = scd_is_current\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> renameOLTPColumns\nDeliveryServiceSource, renameOLTPColumns lookup(delivery_service_id == DIM_delivery_service_id,\n\tmultiple: true,\n\tbroadcast: 'auto')~> LookupForExistingRows\nLookupForExistingRows filter(!isNull(DIM_delivery_service_id)) ~> FilterExistingRows\nSelectRequiredRows derive(scd_is_current = \"NO\") ~> SetIsCurrentToNo\nSetIsCurrentToNo alterRow(updateIf(1==1)) ~> AlterRows\nFilterExistingRows select(mapColumn(\n\t\tsk_delivery_service = DIM_sk_delivery_service,\n\t\tdelivery_service_id = DIM_delivery_service_id,\n\t\tdelivery_service_name = DIM_delivery_service_name,\n\t\tdelivery_service_city = DIM_delivery_service_city,\n\t\tdelivery_service_state = DIM_delivery_service_state,\n\t\tdelivery_service_zip_code_prefix = DIM_delivery_service_zip_code_prefix,\n\t\tdelivery_service_reg_date = DIM_delivery_service_reg_date,\n\t\tscd_created_at = DIM_scd_created_at,\n\t\tscd_is_current = DIM_scd_is_current\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> SelectRequiredRows\naddingSCDIsCurrent sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tinput(\n\t\tsk_delivery_service as integer,\n\t\tdelivery_service_id as string,\n\t\tdelivery_service_name as string,\n\t\tdelivery_service_city as string,\n\t\tdelivery_service_state as string,\n\t\tdelivery_service_zip_code_prefix as integer,\n\t\tdelivery_service_reg_date as timestamp,\n\t\tscd_created_at as timestamp,\n\t\tscd_is_current as string\n\t),\n\tdeletable:false,\n\tinsertable:true,\n\tupdateable:false,\n\tupsertable:false,\n\tformat: 'table',\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\tsaveOrder: 2,\n\terrorHandlingOption: 'stopOnFirstError',\n\tmapColumn(\n\t\tdelivery_service_id,\n\t\tdelivery_service_name,\n\t\tdelivery_service_city,\n\t\tdelivery_service_state,\n\t\tdelivery_service_zip_code_prefix,\n\t\tdelivery_service_reg_date,\n\t\tscd_created_at,\n\t\tscd_is_current\n\t)) ~> sinkAllatFirst\nAlterRows sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tinput(\n\t\tsk_delivery_service as integer,\n\t\tdelivery_service_id as string,\n\t\tdelivery_service_name as string,\n\t\tdelivery_service_city as string,\n\t\tdelivery_service_state as string,\n\t\tdelivery_service_zip_code_prefix as integer,\n\t\tdelivery_service_reg_date as timestamp,\n\t\tscd_created_at as timestamp,\n\t\tscd_is_current as string\n\t),\n\tdeletable:false,\n\tinsertable:false,\n\tupdateable:true,\n\tupsertable:false,\n\tkeys:['sk_delivery_service'],\n\tformat: 'table',\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\tsaveOrder: 1,\n\terrorHandlingOption: 'stopOnFirstError',\n\tmapColumn(\n\t\tsk_delivery_service,\n\t\tdelivery_service_id,\n\t\tdelivery_service_name,\n\t\tdelivery_service_city,\n\t\tdelivery_service_state,\n\t\tdelivery_service_zip_code_prefix,\n\t\tdelivery_service_reg_date,\n\t\tscd_created_at,\n\t\tscd_is_current\n\t)) ~> sinkwithUpdatingSCD"
		}
	}
}