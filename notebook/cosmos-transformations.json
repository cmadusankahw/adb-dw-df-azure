{
	"name": "cosmos-transformations",
	"properties": {
		"nbformat": 4,
		"nbformat_minor": 2,
		"bigDataPool": {
			"referenceName": "sparkpool1",
			"type": "BigDataPoolReference"
		},
		"sessionProperties": {
			"driverMemory": "28g",
			"driverCores": 4,
			"executorMemory": "28g",
			"executorCores": 4,
			"numExecutors": 2,
			"conf": {
				"spark.dynamicAllocation.enabled": "false",
				"spark.dynamicAllocation.minExecutors": "2",
				"spark.dynamicAllocation.maxExecutors": "2",
				"spark.autotune.trackingId": "9cc70354-1362-4a42-a22c-14bb040b34b8"
			}
		},
		"metadata": {
			"saveOutput": true,
			"enableDebugMode": false,
			"kernelspec": {
				"name": "synapse_pyspark",
				"display_name": "Synapse PySpark"
			},
			"language_info": {
				"name": "python"
			},
			"a365ComputeOptions": {
				"id": "/subscriptions/88a4d9bc-f24a-46c1-8cbd-d3ce4a08be79/resourceGroups/as-east-us/providers/Microsoft.Synapse/workspaces/as-syanpse-ws/bigDataPools/sparkpool1",
				"name": "sparkpool1",
				"type": "Spark",
				"endpoint": "https://as-syanpse-ws.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/sparkpool1",
				"auth": {
					"type": "AAD",
					"authResource": "https://dev.azuresynapse.net"
				},
				"sparkVersion": "3.2",
				"nodeCount": 10,
				"cores": 4,
				"memory": 28,
				"automaticScaleJobs": false
			},
			"sessionKeepAliveTimeout": 30
		},
		"cells": [
			{
				"cell_type": "code",
				"source": [
					"# set spark config for session\r\n",
					"# snippets\r\n",
					"%%configure\r\n",
					"{\r\n",
					"    # You can get a list of valid parameters to config the session from https://github.com/cloudera/livy#request-body.\r\n",
					"    \"driverMemory\": \"28g\", # Recommended values: [\"28g\", \"56g\", \"112g\", \"224g\", \"400g\", \"472g\"]\r\n",
					"    \"driverCores\": 4, # Recommended values: [4, 8, 16, 32, 64, 80]\r\n",
					"    \"executorMemory\": \"28g\",\r\n",
					"    \"executorCores\": 4,\r\n",
					"    \"jars\": [\"abfs[s]: //<file_system>@<account_name>.dfs.core.windows.net/<path>/myjar.jar\", \"wasb[s]: //<containername>@<accountname>.blob.core.windows.net/<path>/myjar1.jar\"],\r\n",
					"    \"conf\": \r\n",
					"    {\r\n",
					"        # Example of standard spark property, to find more available properties please visit: https://spark.apache.org/docs/latest/configuration.html#application-properties.\r\n",
					"        \"spark.driver.maxResultSize\": \"10g\",\r\n",
					"        # Example of customized property, you can specify count of lines that Spark SQL returns by configuring \"livy.rsc.sql.num-rows\".\r\n",
					"        \"livy.rsc.sql.num-rows\": \"3000\"\r\n",
					"    }\r\n",
					"}"
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"# library imports\r\n",
					"from pyspark.sql import SparkSession\r\n",
					"from pyspark.sql.types import *\r\n",
					"from pyspark.sql.functions import *\r\n",
					"from pyspark.sql.functions import udf\r\n",
					"from pyspark.sql.utils import AnalysisException\r\n",
					"from pyspark.sql import Row\r\n",
					"import datetime\r\n",
					"import ast\r\n",
					"import re\r\n",
					"import calendar\r\n",
					"import pandas"
				],
				"execution_count": 1
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"account_name = \"ascadl\"\r\n",
					"container_name = \"ascdlfs\"\r\n",
					"\r\n",
					"csv_raw_path = 'abfss://%s@%s.dfs.core.windows.net/%s' % (container_name,account_name,\"data/raw/cosmosdb/customers.csv\")\r\n",
					"json_raw_path = 'abfss://%s@%s.dfs.core.windows.net/%s' % (container_name,account_name,\"data/raw/cosmosdb/customers.json\")"
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"customer_df = spark.read\\\r\n",
					"                .option(\"header\", True)\\\r\n",
					"                .option(\"inferSchema\", True)\\\r\n",
					"                .csv(csv_raw_path)\r\n",
					"customer_df.createOrReplaceTempView(\"customer\")\r\n",
					"\r\n",
					"\r\n",
					"customer_json = spark.read\\\r\n",
					"                .option(\"header\", True)\\\r\n",
					"                .option(\"inferSchema\", True)\\\r\n",
					"                .json(json_raw_path)"
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"# pyspark processig"
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"microsoft": {
						"language": "scala"
					}
				},
				"source": [
					"%%spark\r\n",
					"\r\n",
					"// magic functions - Scala\r\n",
					"\r\n",
					"customer_df.filter(customer_df(\"Location\") === \"Santa Maria-Orcutt\")\r\n",
					"    .groupBy(\"Location\")\r\n",
					"    .count()\r\n",
					"    .as(\"No of Houses\")\r\n",
					"    .show(true)\r\n",
					"\r\n",
					"val avgFunc = udf((HousePrice: Double, SQFeetPrice: Double, Size: Integer) => {( HousePrice + Size * SQFeetPrice ) / 2})\r\n",
					"\r\n",
					"realEstate.withColumn(\"Average Price\", avgFunc(realEstate(\"Price\"),realEstate(\"Price SQ Ft\"),realEstate(\"Size\"))).show(true)"
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"%% sql\r\n",
					"\r\n",
					"-- magic functions SQL"
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"%run /<path>/Notebook1 { \"parameterInt\": 1, \"parameterFloat\": 2.5, \"parameterBool\": true, \"parameterString\": \"abc\" }\r\n",
					"\r\n",
					"# run command currently only supports to pass a absolute path or notebook name only as parameter, relative path is not supported.\r\n",
					"# %run command currently only supports to 4 parameter value types: int, float, bool, string, variable replacement operation is not supported.\r\n",
					"# The referenced notebooks are required to be published. You need to publish the notebooks to reference them. Synapse Studio does not recognize the unpublished notebooks from the Git repo.\r\n",
					"# Referenced notebooks do not support statement that depth is larger than five."
				],
				"execution_count": null
			}
		]
	}
}