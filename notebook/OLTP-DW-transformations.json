{
	"name": "OLTP-DW-transformations",
	"properties": {
		"nbformat": 4,
		"nbformat_minor": 2,
		"bigDataPool": {
			"referenceName": "adbsparkpool",
			"type": "BigDataPoolReference"
		},
		"sessionProperties": {
			"driverMemory": "28g",
			"driverCores": 4,
			"executorMemory": "28g",
			"executorCores": 4,
			"numExecutors": 2,
			"conf": {
				"spark.dynamicAllocation.enabled": "false",
				"spark.dynamicAllocation.minExecutors": "2",
				"spark.dynamicAllocation.maxExecutors": "2",
				"spark.autotune.trackingId": "742f8b27-2724-49f7-8c8a-b8bf6a75be2b"
			}
		},
		"metadata": {
			"saveOutput": true,
			"enableDebugMode": false,
			"kernelspec": {
				"name": "synapse_pyspark",
				"display_name": "Synapse PySpark"
			},
			"language_info": {
				"name": "python"
			},
			"a365ComputeOptions": {
				"id": "/subscriptions/03e69755-ef75-48a3-b96f-506247a595b8/resourceGroups/azure-ceritifications-training/providers/Microsoft.Synapse/workspaces/adb-dw-dm-synapse/bigDataPools/adbsparkpool",
				"name": "adbsparkpool",
				"type": "Spark",
				"endpoint": "https://adb-dw-dm-synapse.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/adbsparkpool",
				"auth": {
					"type": "AAD",
					"authResource": "https://dev.azuresynapse.net"
				},
				"sparkVersion": "3.1",
				"nodeCount": 10,
				"cores": 4,
				"memory": 28,
				"automaticScaleJobs": false
			},
			"sessionKeepAliveTimeout": 30
		},
		"cells": [
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"from pyspark.sql import SparkSession\r\n",
					"from pyspark.sql.types import *\r\n",
					"from pyspark.sql.functions import *\r\n",
					"from pyspark.sql.functions import udf\r\n",
					"from pyspark.sql.utils import AnalysisException\r\n",
					"from pyspark.sql import Row\r\n",
					"import datetime\r\n",
					"import ast\r\n",
					"import re"
				],
				"execution_count": 24
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"account_name = \"chiransubdl\"\r\n",
					"container_name = \"chiransubfs\"\r\n",
					"\r\n",
					"customer_raw_path = 'abfss://%s@%s.dfs.core.windows.net/%s' % (container_name,account_name,\"data/stage/customers.csv\")\r\n",
					"geolocation_raw_path = 'abfss://%s@%s.dfs.core.windows.net/%s' % (container_name,account_name,\"data/stage/geolocation.csv\")\r\n",
					"delivery_services_raw_path = 'abfss://%s@%s.dfs.core.windows.net/%s' % (container_name,account_name,\"data/stage/delivery_services.csv\")\r\n",
					"order_raw_path = 'abfss://%s@%s.dfs.core.windows.net/%s' % (container_name,account_name,\"data/stage/orders.csv\")\r\n",
					"order_items_raw_path = 'abfss://%s@%s.dfs.core.windows.net/%s' % (container_name,account_name,\"data/stage/order_items.csv\")\r\n",
					"order_reviews_raw_path = 'abfss://%s@%s.dfs.core.windows.net/%s' % (container_name,account_name,\"data/stage/order_reviews.csv\")\r\n",
					"order_payments_raw_path = 'abfss://%s@%s.dfs.core.windows.net/%s' % (container_name,account_name,\"data/stage/order_payments.csv\")\r\n",
					"products_raw_path = 'abfss://%s@%s.dfs.core.windows.net/%s' % (container_name,account_name,\"data/stage/products.csv\")\r\n",
					"product_categories_raw_path = 'abfss://%s@%s.dfs.core.windows.net/%s' % (container_name,account_name,\"data/stage/product_categories.csv\")\r\n",
					"sellers_raw_path = 'abfss://%s@%s.dfs.core.windows.net/%s' % (container_name,account_name,\"data/stage/sellers.csv\")\r\n",
					"suppliers_raw_path = 'abfss://%s@%s.dfs.core.windows.net/%s' % (container_name,account_name,\"data/stage/suppliers.csv\")"
				],
				"execution_count": 25
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"customer_df = spark.read\\\r\n",
					"                .option(\"header\", True)\\\r\n",
					"                .option(\"inferSchema\", True)\\\r\n",
					"                .csv(customer_raw_path)\r\n",
					"customer_df.createOrReplaceTempView(\"customer\")\r\n",
					"\r\n",
					"order_df = spark.read\\\r\n",
					"                .option(\"header\", True)\\\r\n",
					"                .option(\"inferSchema\", True)\\\r\n",
					"                .csv(order_raw_path)\r\n",
					"order_df.createOrReplaceTempView(\"order\")\r\n",
					"\r\n",
					"order_items_df = spark.read\\\r\n",
					"                .option(\"header\", True)\\\r\n",
					"                .option(\"inferSchema\", True)\\\r\n",
					"                .csv(order_items_raw_path)\r\n",
					"order_items_df.createOrReplaceTempView(\"orderitems\")\r\n",
					"\r\n",
					"order_payments_df = spark.read\\\r\n",
					"                .option(\"header\", True)\\\r\n",
					"                .option(\"inferSchema\", True)\\\r\n",
					"                .csv(order_payments_raw_path)\r\n",
					"order_payments_df.createOrReplaceTempView(\"orderpayments\")\r\n",
					"\r\n",
					"order_reviews_df = spark.read\\\r\n",
					"                .option(\"header\", True)\\\r\n",
					"                .option(\"inferSchema\", True)\\\r\n",
					"                .csv(order_reviews_raw_path)\r\n",
					"order_reviews_df.createOrReplaceTempView(\"orderreviews\")\r\n",
					"\r\n",
					"products_df = spark.read\\\r\n",
					"                .option(\"header\", True)\\\r\n",
					"                .option(\"inferSchema\", True)\\\r\n",
					"                .csv(products_raw_path)\r\n",
					"products_df.createOrReplaceTempView(\"product\")\r\n",
					"\r\n",
					"product_categorie_df = spark.read\\\r\n",
					"                .option(\"header\", True)\\\r\n",
					"                .option(\"inferSchema\", True)\\\r\n",
					"                .csv(product_categories_raw_path)\r\n",
					"product_categorie_df.createOrReplaceTempView(\"productcategories\")\r\n",
					"\r\n",
					"geolocation_df = spark.read\\\r\n",
					"                .option(\"header\", True)\\\r\n",
					"                .option(\"inferSchema\", True)\\\r\n",
					"                .csv(geolocation_raw_path)\r\n",
					"geolocation_df.createOrReplaceTempView(\"geolocation\")\r\n",
					"\r\n",
					"delivery_services_df = spark.read\\\r\n",
					"                .option(\"header\", True)\\\r\n",
					"                .option(\"inferSchema\", True)\\\r\n",
					"                .csv(delivery_services_raw_path)\r\n",
					"delivery_services_df.createOrReplaceTempView(\"deliveryservices\")\r\n",
					"\r\n",
					"seller_df = spark.read\\\r\n",
					"                .option(\"header\", True)\\\r\n",
					"                .option(\"inferSchema\", True)\\\r\n",
					"                .csv(sellers_raw_path)\r\n",
					"seller_df.createOrReplaceTempView(\"seller\")\r\n",
					"\r\n",
					"supplier_df = spark.read\\\r\n",
					"                .option(\"header\", True)\\\r\n",
					"                .option(\"inferSchema\", True)\\\r\n",
					"                .csv(suppliers_raw_path)\r\n",
					"supplier_df.createOrReplaceTempView(\"supplier\")"
				],
				"execution_count": 26
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"Generic UDF Definition"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"\"\"\"\r\n",
					"    Generic UDF to get a substring of a given column\r\n",
					"\"\"\"\r\n",
					"def getsubstring(col,start,end):\r\n",
					"    try:\r\n",
					"        return str(col)[start:end]\r\n",
					"    except:\r\n",
					"        pass\r\n",
					"\r\n",
					"\"\"\"\r\n",
					"    Generic UDF to calculate Age\r\n",
					"\"\"\"\r\n",
					"def calc_age(col):\r\n",
					"    cur_year = int(datetime.datetime.now().date().strftime(\"%Y\"))\r\n",
					"    try:\r\n",
					"        return (cur_year - int(col[0:4]))\r\n",
					"    except:\r\n",
					"        pass\r\n",
					"\r\n",
					"\r\n",
					"\"\"\"\r\n",
					"    Generic UDF to bucketize given column values into a given no of buckets\r\n",
					"\"\"\"\r\n",
					"def bucketize(col,bucket_margins,bucket_names):\r\n",
					"    try:\r\n",
					"        for i in range(len(bucket_margins)):\r\n",
					"            if col < bucket_margins[i]:\r\n",
					"                return bucket_names[i]\r\n",
					"    except:\r\n",
					"        pass\r\n",
					"\r\n",
					"\"\"\"\r\n",
					"    Generic UDF to bucketize non-numeric columns\r\n",
					"\"\"\"\r\n",
					"def social_state(col,bucket_values,bucket_names):\r\n",
					"    try:\r\n",
					"        for i in range(len(bucket_values)):\r\n",
					"            if col == bucket_values[i]:\r\n",
					"                return bucket_names[i]\r\n",
					"        else:\r\n",
					"            return bucket_names[-1]\r\n",
					"    except:\r\n",
					"        pass"
				],
				"execution_count": 27
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"Customer Dimension"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"getBirthYear = udf(lambda z: getsubstring(z,0,4))\r\n",
					"getBirthMonth = udf(lambda z: getsubstring(z,5,7))\r\n",
					"getAge = udf(lambda z: calc_age(z))\r\n",
					"generationBucketizer = udf(lambda z: bucketize(z,[18,23,39,55,64,199],[\"Children\",\"GenerationZ\",\"Millenials\",\"GenX\",\"BabyBoomer\",\"Silent\"]),StringType())\r\n",
					"ageCategoryBucketizer = udf(lambda z: bucketize(z,[18,25,35,45,55,65,199],[\"0-18\",\"19-25\",\"26-35\",\"36-45\",\"46-55\",\"56-65\",\"66+\"]),StringType())\r\n",
					"socialStateBucketizer = udf(lambda z: social_state(z,[\"0-19999\",\"100000-199999\"],[\"Poor\",\"Wealthy\",\"Mid Level Income\"]),StringType())\r\n",
					"getPhoneOperator = udf(lambda z: getsubstring(z,0,3))\r\n",
					"\r\n",
					"customer_df = customer_df.withColumn( 'birth_year', getBirthYear('birth_date'))\\\r\n",
					".withColumn( 'birth_month', getBirthMonth('birth_date'))\\\r\n",
					".withColumn( 'age', getAge('birth_date'))\\\r\n",
					".withColumn( 'generation', generationBucketizer('age'))\\\r\n",
					".withColumn( 'age_category', ageCategoryBucketizer('age'))\\\r\n",
					".withColumn( 'social_state', socialStateBucketizer('income'))\\\r\n",
					".withColumn( 'phone_operator', getPhoneOperator('phone_no'))\\\r\n",
					".drop('phone_no')"
				],
				"execution_count": 31
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"Delivery Services Dimension"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					""
				],
				"execution_count": null
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"Processed Data Dumping"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"spark.conf.set(\"spark.sql.broadcastTimeout\", \"36000\")\r\n",
					"\r\n",
					"customer_processed_path = 'abfss://%s@%s.dfs.core.windows.net/%s' % (container_name,account_name,\"data/curated/dim_customer.csv\")\r\n",
					"delivery_services_processed_path = 'abfss://%s@%s.dfs.core.windows.net/%s' % (container_name,account_name,\"data/curated/dim_delivery_service.csv\")\r\n",
					"supplier_processed_path = 'abfss://%s@%s.dfs.core.windows.net/%s' % (container_name,account_name,\"data/curated/dim_supplier.csv\")\r\n",
					"seller_processed_path = 'abfss://%s@%s.dfs.core.windows.net/%s' % (container_name,account_name,\"data/curated/dim_seller.csv\")\r\n",
					"product_processed_path = 'abfss://%s@%s.dfs.core.windows.net/%s' % (container_name,account_name,\"data/curated/dim_product.csv\")\r\n",
					"order_details_processed_path = 'abfss://%s@%s.dfs.core.windows.net/%s' % (container_name,account_name,\"data/curated/dim_order_details.csv\")\r\n",
					"order_review_path = 'abfss://%s@%s.dfs.core.windows.net/%s' % (container_name,account_name,\"data/curated/dim_order_review.csv\")"
				],
				"execution_count": 15
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"customer_df.write\\\r\n",
					".format(\"csv\")\\\r\n",
					".mode(\"overwrite\")\\\r\n",
					".option(\"header\", \"true\")\\\r\n",
					".option(\"sep\",\"|\")\\\r\n",
					".save(customer_processed_path)\r\n",
					"\r\n",
					"delivery_services_df.write\\\r\n",
					".format(\"csv\")\\\r\n",
					".mode(\"overwrite\")\\\r\n",
					".option(\"header\", \"true\")\\\r\n",
					".option(\"sep\",\"|\")\\\r\n",
					".save(delivery_services_processed_path)"
				],
				"execution_count": 16
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					""
				]
			}
		]
	}
}